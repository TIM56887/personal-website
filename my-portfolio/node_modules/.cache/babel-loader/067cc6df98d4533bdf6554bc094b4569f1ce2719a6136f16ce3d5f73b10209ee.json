{"ast":null,"code":"import liff from \"@line/liff\";\nimport { mapState } from 'vuex';\nimport SuggestTodoItem from './SuggestTodoItem.vue';\nexport default {\n  name: 'SuggestTodo',\n  components: {\n    SuggestTodoItem\n  },\n  data() {\n    return {\n      user: '',\n      inputData: '',\n      currentUserData: {},\n      isLoggedIn: false\n    };\n  },\n  methods: {\n    addnewtodo(e) {\n      e.preventDefault();\n      if (this.inputData) {\n        const data = {\n          createtime: new Date(),\n          content: e.target.value,\n          userid: this.user\n        };\n        this.inputData = \"\";\n        this.$store.dispatch('SendTodo', data);\n      }\n    },\n    deletetodo(id) {\n      console.log(id);\n      this.$store.dispatch('deletetodo', id);\n    },\n    liffLogin(e) {\n      liff.init({\n        liffId: '2000362113-Dd5JOa2e'\n      }).then(() => {\n        if (!liff.isLoggedIn()) {\n          liff.login();\n        }\n        liff.getProfile().then(pf => {\n          this.isLoggedIn = true;\n          this.currentUserData = pf;\n          pf.commentDate = new Date().toLocaleString(\"zh-TW\", {\n            timeZone: \"Asia/Taipei\"\n          });\n          pf.commentText = e.target.value;\n          this.$store.dispatch('sendComment', pf);\n        }).catch(err => {\n          console.log(\"error\", err);\n        });\n      }).catch(err => {\n        this.message = \"LIFF init failed.\";\n        this.error = `${err}`;\n      });\n    },\n    addNewComment() {\n      let commentData = {\n        ...this.currentUserData,\n        commentDate: new Date().toLocaleString(\"zh-TW\", {\n          timeZone: \"Asia/Taipei\"\n        }),\n        commentText: this.inputData\n      };\n      this.$store.dispatch('sendComment', commentData);\n    }\n  },\n  computed: {\n    ...mapState(['todo', 'comments'])\n  },\n  mounted() {\n    liff.init({\n      liffId: '2000362113-Dd5JOa2e'\n    }).then(() => {\n      if (liff.isLoggedIn()) {\n        this.isLoggedIn = true;\n        liff.getProfile().then(pf => {\n          this.isLoggedIn = true;\n          this.currentUserData = pf;\n        }).catch(err => {\n          console.log(\"error\", err);\n        });\n      }\n    });\n    this.$store.dispatch('getComment');\n    this.$store.dispatch('gettodo');\n    if (localStorage.getItem('userId')) {\n      this.$store.dispatch('getusertodo', localStorage.getItem('userId'));\n      this.user = localStorage.getItem('userId');\n    }\n    console.log(this.$store.state.userstodo);\n    console.log(this.$store.state.comments);\n  },\n  watch: {\n    inputData(newVal, oldVal) {\n      if (newVal.includes(\"*\") || newVal.includes(\";\")) {\n        this.inputData = oldVal;\n      }\n    }\n  }\n};","map":{"version":3,"names":["liff","mapState","SuggestTodoItem","name","components","data","user","inputData","currentUserData","isLoggedIn","methods","addnewtodo","e","preventDefault","createtime","Date","content","target","value","userid","$store","dispatch","deletetodo","id","console","log","liffLogin","init","liffId","then","login","getProfile","pf","commentDate","toLocaleString","timeZone","commentText","catch","err","message","error","addNewComment","commentData","computed","mounted","localStorage","getItem","state","userstodo","comments","watch","newVal","oldVal","includes"],"sources":["src/components/SuggestTodo.vue"],"sourcesContent":["<template>\r\n    <section class=\"comment-area\">\r\n        <div class=\"mt-5 area container-sm\">\r\n            <div class=\"row\">\r\n                <h1>\r\n                <div class=\"text-center fs-3\">\r\n                    Comment . . .\r\n                </div>\r\n            </h1>\r\n            </div>\r\n\r\n            <div class=\"suggestTodo h-100 row\">\r\n                <div class=\"showlist mt-4 h-75\">\r\n                    <ul>\r\n                        <SuggestTodoItem v-for=\"comment in comments\" :key=\"comment.commentId\" :comment=\"comment\" :currentUser=\"currentUserData.userId\"/>\r\n                    </ul>\r\n                </div>\r\n                <div v-if=\"isLoggedIn\" class=\"d-flex justify-content-center input-box\">\r\n                    <div class=\"input-group input-group-lg shadow-sm mx-5 bg-body-tertiary rounded\" >\r\n                        <textarea\r\n                            type=\"text\" \r\n                            class=\"form-control fs-5 \" \r\n                            aria-label=\"Sizing example input\" \r\n                            aria-describedby=\"inputGroup-sizing-lg\"\r\n                            placeholder=\"your input is always good . . .\" \r\n                            maxlength=\"100\"\r\n                            v-model=\"inputData\"\r\n                        ></textarea>\r\n                        <button @click=\"addNewComment\"><span class=\"input-group-text input-title\" id=\"inputGroup-sizing-lg\"><i class=\"bi bi-send fs-4\"></i></span></button>\r\n                    </div>\r\n                </div>\r\n                <button v-else type=\"button\" class=\"btn btn-primary\" @click=\"addNewComment\">Line login to comment</button>\r\n                \r\n            </div>\r\n        </div>\r\n    </section>\r\n</template>\r\n\r\n<script>\r\nimport liff from \"@line/liff\";\r\nimport { mapState } from 'vuex'\r\nimport SuggestTodoItem from './SuggestTodoItem.vue';\r\nexport default {\r\n    name:'SuggestTodo',\r\n    components:{\r\n        SuggestTodoItem\r\n    },\r\n    data() {\r\n        return {\r\n            user:'',\r\n            inputData:'',\r\n            currentUserData:{},\r\n            isLoggedIn:false\r\n        };\r\n    },\r\n    methods:{\r\n        addnewtodo(e){ \r\n            e.preventDefault();\r\n            \r\n            if (this.inputData){\r\n                const data = {\r\n                    createtime:new Date(),\r\n                    content:e.target.value,\r\n                    userid:this.user\r\n                }\r\n                this.inputData = \"\" \r\n                this.$store.dispatch('SendTodo',data)\r\n            }\r\n            \r\n        },\r\n        deletetodo(id){\r\n            console.log(id)\r\n            this.$store.dispatch('deletetodo',id)\r\n        },\r\n        liffLogin(e) {\r\n            liff.init({liffId:'2000362113-Dd5JOa2e'})\r\n            .then(()=> {\r\n                if (!liff.isLoggedIn()) {\r\n                    liff.login();\r\n                }\r\n                liff.getProfile().then((pf) => {\r\n                    this.isLoggedIn = true\r\n                    this.currentUserData = pf\r\n                    pf.commentDate = new Date().toLocaleString(\"zh-TW\", { timeZone: \"Asia/Taipei\" });\r\n                    pf.commentText = e.target.value\r\n                    this.$store.dispatch('sendComment',pf)\r\n                }).catch((err) => {\r\n                    console.log(\"error\",err)\r\n                })\r\n            })\r\n            .catch((err) => {\r\n                this.message = \"LIFF init failed.\";\r\n                this.error = `${err}`;\r\n            })\r\n            \r\n        },\r\n        addNewComment() {\r\n            let commentData = {\r\n                ...this.currentUserData,\r\n                commentDate: new Date().toLocaleString(\"zh-TW\", { timeZone: \"Asia/Taipei\" }),\r\n                commentText: this.inputData\r\n            };\r\n            this.$store.dispatch('sendComment',commentData)\r\n        }\r\n    },\r\n    computed:{\r\n        ...mapState(['todo','comments']),\r\n    },\r\n    mounted(){\r\n        liff.init({liffId:'2000362113-Dd5JOa2e'})\r\n        .then(() => {\r\n            if (liff.isLoggedIn()) {\r\n                    this.isLoggedIn = true\r\n                    liff.getProfile().then((pf) => {\r\n                        this.isLoggedIn = true\r\n                        this.currentUserData = pf\r\n                    }).catch((err) => {\r\n                        console.log(\"error\",err)\r\n                    })\r\n                }\r\n        })\r\n        this.$store.dispatch('getComment')\r\n        this.$store.dispatch('gettodo')\r\n        if(localStorage.getItem('userId')) {\r\n            this.$store.dispatch('getusertodo',localStorage.getItem('userId'))\r\n            this.user = localStorage.getItem('userId')\r\n        }\r\n        console.log(this.$store.state.userstodo)\r\n        console.log(this.$store.state.comments)\r\n    },\r\n    watch:{\r\n        inputData(newVal,oldVal){\r\n            if(newVal.includes(\"*\") || newVal.includes(\";\")){\r\n                this.inputData = oldVal\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n    button {\r\n        border: none;\r\n    }\r\n    .area {\r\n        max-width: 680px;\r\n    }\r\n    .input-title{\r\n        font-weight: 600;\r\n        \r\n    }\r\n\r\n    h1 {\r\n        /* color: #60a5fa; */\r\n        font-size: 1.5rem;\r\n        font-weight: 700;\r\n        font-family: inherit;\r\n        line-height: 1.1;\r\n        margin-top: 2rem;\r\n    }\r\n    .input-box{\r\n        height: 13%;\r\n    }\r\n      .background {\r\n          width: 60%;\r\n          height: 800px;    \r\n          border-radius: 1rem;\r\n          box-shadow: inset 0 0 10px rgba(8, 8, 8,0.1); \r\n\r\n      }\r\n    .comment-area{\r\n        \r\n        min-height: 100vh;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n    }\r\n\r\n    .showlist{\r\n        height: 80%;\r\n        overflow-y: auto;\r\n    }\r\n\r\n    @media (min-width: 768px) {\r\n    \r\n    \r\n\r\n\r\n\r\n\r\n\r\n    h2{\r\n        margin: 2rem 0 1rem 0;\r\n        font-weight: 900;\r\n        font-size: 2rem;\r\n        \r\n    }\r\n    ul{\r\n        padding: 0;\r\n    }\r\n    }\r\n\r\n\r\n    @media (max-width:768px) {\r\n        .background {\r\n            width: 99%;\r\n        }\r\n\r\n        .input-box{\r\n            height: 10%;\r\n            \r\n        }\r\n\r\n\r\n        /* h2{\r\n\r\n            margin: 2rem 0 1rem 1rem;\r\n            font-weight: 900;\r\n            font-size: 2rem;\r\n        \r\n        }\r\n\r\n        .todoinput{\r\n            display: flex;\r\n            flex-direction: column;\r\n            justify-content: space-between;\r\n            height: 150px;\r\n        }\r\n        ul{\r\n           padding: 0;\r\n    }\r\n        .showlist{\r\n            height: 70%;\r\n            overflow-y: auto;\r\n            margin: 1rem 0;\r\n        } */\r\n        /* .suggestTodo {\r\n            display: flex;\r\n            flex-direction: column;\r\n            width:70vw;\r\n            height: 70%;\r\n            background-color:#fff;\r\n            border-radius: 2rem;\r\n            padding: 0 0 0 0;\r\n            border: 2px solid #ccc;\r\n            box-shadow: 0 0 10px rgba(0,0,0,.1);\r\n        }    */\r\n        /* input {\r\n            width: 90%;\r\n            border-radius: 2rem;\r\n            height: 3rem;\r\n            opacity: 1;\r\n            padding-left: 20px;\r\n            margin: auto auto\r\n        }     */\r\n        /* ul {\r\n            height:100%;\r\n            padding: 0 0 0 20px;\r\n            \r\n        }\r\n        label[for=\"todo\"] {\r\n            font-size: 1.3rem;\r\n            font-weight: 600;\r\n            margin:0 0 10px 1rem\r\n\r\n            \r\n\r\n        }\r\n\r\n        .todocontent{\r\n            font-size:30px;\r\n            font-weight: 600;\r\n            display:inline-block;\r\n            width:350px\r\n        }\r\n\r\n        .deleteButton{\r\n            font-size:18px;\r\n            border: 2px solid rgb(204, 102, 102);\r\n            border-radius: 12px;\r\n            height: 40px;\r\n            width: 100px;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .deleteButton:hover {\r\n            background-color: rgb(204, 102, 102);\r\n        } */\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n</style>"],"mappings":"AAuCA,OAAAA,IAAA;AACA,SAAAC,QAAA;AACA,OAAAC,eAAA;AACA;EACAC,IAAA;EACAC,UAAA;IACAF;EACA;EACAG,KAAA;IACA;MACAC,IAAA;MACAC,SAAA;MACAC,eAAA;MACAC,UAAA;IACA;EACA;EACAC,OAAA;IACAC,WAAAC,CAAA;MACAA,CAAA,CAAAC,cAAA;MAEA,SAAAN,SAAA;QACA,MAAAF,IAAA;UACAS,UAAA,MAAAC,IAAA;UACAC,OAAA,EAAAJ,CAAA,CAAAK,MAAA,CAAAC,KAAA;UACAC,MAAA,OAAAb;QACA;QACA,KAAAC,SAAA;QACA,KAAAa,MAAA,CAAAC,QAAA,aAAAhB,IAAA;MACA;IAEA;IACAiB,WAAAC,EAAA;MACAC,OAAA,CAAAC,GAAA,CAAAF,EAAA;MACA,KAAAH,MAAA,CAAAC,QAAA,eAAAE,EAAA;IACA;IACAG,UAAAd,CAAA;MACAZ,IAAA,CAAA2B,IAAA;QAAAC,MAAA;MAAA,GACAC,IAAA;QACA,KAAA7B,IAAA,CAAAS,UAAA;UACAT,IAAA,CAAA8B,KAAA;QACA;QACA9B,IAAA,CAAA+B,UAAA,GAAAF,IAAA,CAAAG,EAAA;UACA,KAAAvB,UAAA;UACA,KAAAD,eAAA,GAAAwB,EAAA;UACAA,EAAA,CAAAC,WAAA,OAAAlB,IAAA,GAAAmB,cAAA;YAAAC,QAAA;UAAA;UACAH,EAAA,CAAAI,WAAA,GAAAxB,CAAA,CAAAK,MAAA,CAAAC,KAAA;UACA,KAAAE,MAAA,CAAAC,QAAA,gBAAAW,EAAA;QACA,GAAAK,KAAA,CAAAC,GAAA;UACAd,OAAA,CAAAC,GAAA,UAAAa,GAAA;QACA;MACA,GACAD,KAAA,CAAAC,GAAA;QACA,KAAAC,OAAA;QACA,KAAAC,KAAA,MAAAF,GAAA;MACA;IAEA;IACAG,cAAA;MACA,IAAAC,WAAA;QACA,QAAAlC,eAAA;QACAyB,WAAA,MAAAlB,IAAA,GAAAmB,cAAA;UAAAC,QAAA;QAAA;QACAC,WAAA,OAAA7B;MACA;MACA,KAAAa,MAAA,CAAAC,QAAA,gBAAAqB,WAAA;IACA;EACA;EACAC,QAAA;IACA,GAAA1C,QAAA;EACA;EACA2C,QAAA;IACA5C,IAAA,CAAA2B,IAAA;MAAAC,MAAA;IAAA,GACAC,IAAA;MACA,IAAA7B,IAAA,CAAAS,UAAA;QACA,KAAAA,UAAA;QACAT,IAAA,CAAA+B,UAAA,GAAAF,IAAA,CAAAG,EAAA;UACA,KAAAvB,UAAA;UACA,KAAAD,eAAA,GAAAwB,EAAA;QACA,GAAAK,KAAA,CAAAC,GAAA;UACAd,OAAA,CAAAC,GAAA,UAAAa,GAAA;QACA;MACA;IACA;IACA,KAAAlB,MAAA,CAAAC,QAAA;IACA,KAAAD,MAAA,CAAAC,QAAA;IACA,IAAAwB,YAAA,CAAAC,OAAA;MACA,KAAA1B,MAAA,CAAAC,QAAA,gBAAAwB,YAAA,CAAAC,OAAA;MACA,KAAAxC,IAAA,GAAAuC,YAAA,CAAAC,OAAA;IACA;IACAtB,OAAA,CAAAC,GAAA,MAAAL,MAAA,CAAA2B,KAAA,CAAAC,SAAA;IACAxB,OAAA,CAAAC,GAAA,MAAAL,MAAA,CAAA2B,KAAA,CAAAE,QAAA;EACA;EACAC,KAAA;IACA3C,UAAA4C,MAAA,EAAAC,MAAA;MACA,IAAAD,MAAA,CAAAE,QAAA,SAAAF,MAAA,CAAAE,QAAA;QACA,KAAA9C,SAAA,GAAA6C,MAAA;MACA;IACA;EACA;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}